#!/bin/bash
# -*- coding: utf-8 -*-

declare -r VenvDir='./.venv/bin'

echo_info() {
    printf '\x1b[32mInform:\x1b[0m  %s\n' "$*"
}

echo_warn() {
    printf '\x1b[33mWarning:\x1b[0m %s\n' "$*"
}

echo_err() {
    printf '\x1b[31mError:\x1b[0m   %s\n' "$*"
}

if [[ ! -d "${VenvDir}" ]]; then
    echo_err "Jarvis could not find the virtual environment directory ${VenvDir}"
    exit 1
fi

activate-venv() {
    # shellcheck disable=SC1090
    if ! source "${VenvDir}/activate"; then
        echo_err "Failed to activate venv"
        return 1
    fi
    return 0
}

install-dependencies() {
   pip install -r requirements.txt
   return
}

pull-remotes() {
    local Branch
    local -a Branches
    local branch

    if ! Branch="$(git rev-parse --abbrev-ref HEAD)"; then
        echo_err 'Failed to get branch name'
        return 1
    fi

    # if ! git pull --all; then
    #     echo_err 'Failed to pull all remotes'
    #     # return 1
    # fi

    readarray -t Branches < <(git branch | sed -E 's/^[ *]+//' ) ; echo "${AD[@]}"
    readonly Branches

    for branch in "${Branches[@]}"; do
        echo_info "Now on branch ${branch}"
        if ! git checkout "${branch}" &>/dev/null; then
            echo_err "Failed to checkout branch ${branch}"
            continue
        fi

        if ! git rev-parse --abbrev-ref --symbolic-full-name @{u} &>/dev/null; then
            echo_warn 'Could not fetch branch upstream'
            continue
        fi

        if ! git fetch &>/dev/null; then
            echo_err "Failed to fetch branch ${branch}"
            continue
        fi

        if ! git merge "$(git rev-parse --abbrev-ref --symbolic-full-name @{u})"; then
            echo_err 'Failed to merge'
            continue
        fi
    done

    if [[ "$(git branch | awk '/*/ { print $2 }')" !=  "${Branch}" ]]; then
        if ! git checkout "${Branch}"; then
            echo_err "Failed to move back to branch ${Branch}"
            return 1
        fi
    fi

    return 0
}

tests() {
    export MYPYPATH="${MYPYPATH}:./"
    pytest --flake8 --mypy --color=yes "$@" |& tee test-log.txt
    return
}

show-tree() {
    tree -I __pycache__
    return
}

usage() {
    read -r -d '' VAR <<EOF
Usage:
    ${BASH_SOURCE[0]} Action [Options]

Actions: 
    help|--help|-h|h            Display this help text
    intsall                     Install the project dependencies
    resync-tags-from-remote     Delete local tags and pull from the remote
    sync                        Synchronise local branches with the remotes
    test                        Run project tests
    tree                        Show project contents
EOF
    printf '%s\n' "${VAR}"
    return 0
}

main() {
    Action="${1}"
    readonly Action
    shift

    if ! activate-venv; then
        exit 1
    fi

    case "${Action}" in
        help|--help|-h|h)
            usage
            ;;

        install)
            install-dependencies
            exit
            ;;

        resync-tags-from-remote)
            if ! (set -o pipefail ; git tag -l | xargs git tag -d; exit); then
                echo_err 'Failed to kill the tags'
                exit 1
            fi

            if ! git fetch --tags; then
                echo_err 'Failed to retrieve remote tags'
                exit 1
            fi
            exit
            ;;

        sync)
            pull-remotes
            exit
            ;;

        test)
            tests "$@"
            exit
            ;;

        tree)
            show-tree
            exit
            ;;

        *)
            echo_err "Unknown option"
            usage
            exit 1
            ;;
    esac
    return
}


if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi
